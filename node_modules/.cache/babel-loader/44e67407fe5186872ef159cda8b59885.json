{"ast":null,"code":"import _defineProperty from \"/Users/ktatmiya/learning/j/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_DATA_SUCCESS, FETCH_USER_DATA, DELETE_USER_DATA } from \"../actions/types\";\nconst initState = {\n  data: []\n};\n\nconst userReducer = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_DATA_SUCCESS:\n      const index = state.data.findIndex(rec => rec.id === action.payload.id);\n      let userData;\n\n      if (index > -1) {\n        const userData = _objectSpread({}, state.data, {\n          [action.payload.id]: userData\n        });\n      }\n\n      return _objectSpread({}, state, {\n        data: userData,\n        userSaved: true\n      });\n\n    case FETCH_USER_DATA:\n      const users = _objectSpread({}, state, {\n        userSaved: false\n      });\n\n      return users;\n\n    case DELETE_USER_DATA:\n      return _objectSpread({}, state, {\n        data: state.data.filter(({\n          id\n        }) => !action.payload.includes(id))\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/Users/ktatmiya/learning/j/src/store/reducers/userReducer.jsx"],"names":["ADD_DATA_SUCCESS","FETCH_USER_DATA","DELETE_USER_DATA","initState","data","userReducer","state","action","type","index","findIndex","rec","id","payload","userData","userSaved","users","filter","includes"],"mappings":";;;;;;AAAA,SACEA,gBADF,EAEEC,eAFF,EAGEC,gBAHF,QAIO,kBAJP;AAMA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAAlB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,SAAT,EAAoBI,MAApB,KAA+B;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,gBAAL;AACE,YAAMS,KAAK,GAAGH,KAAK,CAACF,IAAN,CAAWM,SAAX,CAAqBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACM,OAAP,CAAeD,EAAtD,CAAd;AACA,UAAIE,QAAJ;;AACA,UAAIL,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,cAAMK,QAAQ,qBACTR,KAAK,CAACF,IADG;AAEZ,WAACG,MAAM,CAACM,OAAP,CAAeD,EAAhB,GAAqBE;AAFT,UAAd;AAID;;AAED,+BACKR,KADL;AAEEF,QAAAA,IAAI,EAAEU,QAFR;AAGEC,QAAAA,SAAS,EAAE;AAHb;;AAMF,SAAKd,eAAL;AACE,YAAMe,KAAK,qBACNV,KADM;AAETS,QAAAA,SAAS,EAAE;AAFF,QAAX;;AAIA,aAAOC,KAAP;;AAEF,SAAKd,gBAAL;AACE,+BACKI,KADL;AAEEF,QAAAA,IAAI,EAAEE,KAAK,CAACF,IAAN,CAAWa,MAAX,CAAkB,CAAC;AAAEL,UAAAA;AAAF,SAAD,KAAY,CAACL,MAAM,CAACM,OAAP,CAAeK,QAAf,CAAwBN,EAAxB,CAA/B;AAFR;;AAKF;AACE,aAAON,KAAP;AA/BJ;AAiCD,CAlCD;;AAoCA,eAAeD,WAAf","sourcesContent":["import {\r\n  ADD_DATA_SUCCESS,\r\n  FETCH_USER_DATA,\r\n  DELETE_USER_DATA\r\n} from \"../actions/types\";\r\n\r\nconst initState = {\r\n  data: []\r\n};\r\n\r\nconst userReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ADD_DATA_SUCCESS:\r\n      const index = state.data.findIndex(rec => rec.id === action.payload.id);\r\n      let userData;\r\n      if (index > -1) {\r\n        const userData = {\r\n          ...state.data,\r\n          [action.payload.id]: userData\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        data: userData,\r\n        userSaved: true\r\n      };\r\n\r\n    case FETCH_USER_DATA:\r\n      const users = {\r\n        ...state,\r\n        userSaved: false\r\n      };\r\n      return users;\r\n\r\n    case DELETE_USER_DATA:\r\n      return {\r\n        ...state,\r\n        data: state.data.filter(({ id }) => !action.payload.includes(id))\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n"]},"metadata":{},"sourceType":"module"}