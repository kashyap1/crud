{"ast":null,"code":"import _defineProperty from \"/Users/ktatmiya/learning/j/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_DATA_SUCCESS } from \"../actions/types\";\nconst initState = {\n  success: []\n};\n\nconst successReducer = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_DATA_SUCCESS:\n      return _objectSpread({}, state, {\n        success: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default successReducer;","map":{"version":3,"sources":["/Users/ktatmiya/learning/j/src/store/reducers/successReducer.jsx"],"names":["ADD_DATA_SUCCESS","initState","success","successReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE;AADO,CAAlB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,SAAT,EAAoBI,MAApB,KAA+B;AAElD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,gBAAL;AACI,+BACKI,KADL;AAEEF,QAAAA,OAAO,EAAEG,MAAM,CAACE;AAFlB;;AAIJ;AACE,aAAOH,KAAP;AAPJ;AAUH,CAZD;;AAcA,eAAeD,cAAf","sourcesContent":["import { ADD_DATA_SUCCESS } from \"../actions/types\";\r\n\r\nconst initState = {\r\n  success: []\r\n};\r\n\r\nconst successReducer = (state = initState, action) => {\r\n \r\n    switch (action.type) {\r\n      case ADD_DATA_SUCCESS:\r\n          return {\r\n            ...state,\r\n            success: action.payload\r\n          };\r\n      default:\r\n        return state;\r\n    }\r\n \r\n};\r\n\r\nexport default successReducer;\r\n"]},"metadata":{},"sourceType":"module"}